[{"content":"In a previous post I wanted to look at the daily pattern of motor vehicle accidents across the state of Victoria. What I am really interested in though is the accidents in my local area.\nTo do this I am going to use leaflet, sf to handle all the spatial data and crosstalk to filter the data visible in the map. The crosstalk package enables a level of interactivity that is usually reserved for more complex server (shiny) based applications.\nThe data is from the VicRoads open data portal. The portal has an API but I have previously downloaded the entire data set as a shapefile. There are more than 75 thousand accidents recorded in the data set but I am only looking at accidents related to alcohol for the years 2015 through 2017.\nlibrary(sf) library(dplyr) library(leaflet) library(crosstalk) library(lubridate) library(htmltools) shp \u0026lt;- st_read(\u0026#39;~/Documents/Matt/GIS/shp\u0026#39;,\u0026#39;Crashes_Last_Five_Years\u0026#39;, quiet = TRUE, stringsAsFactors = FALSE) %\u0026gt;% mutate(date = as.Date(as.character(ACCIDENT_D), \u0026#39;%d/%m/%Y\u0026#39;), year = year(date)) %\u0026gt;% filter(ALCOHOL_RE == \u0026#39;Yes\u0026#39;) sd \u0026lt;- SharedData$new(shp) Once the data is imported and cleaned it is inserted into a crosstalk::SharedData$new() object. This creates a common data input for all interactive objects such as UI elements and compatible widgets. For a complete list of compatible widgets see the crosstalk reference page.\nAm minimal example can be just two lines of additional code which results in a UI slider connected to the date field and a leaflet map. Adjusting the slider will filter the markers visible in the map.\nfilter_slider(\u0026#34;date\u0026#34;, \u0026#34;\u0026#34;, sd, column=~date, step=10, width=800) leaflet(sd) %\u0026gt;% addTiles() %\u0026gt;% addMarkers() But let\u0026rsquo;s add some additional layers of interactivity. Crosstalk has three UI filters built-in; slider, check-box and select. In the code below I am creating and saving the UI elements in order to have a little more control fitting them together.\ndate_filter \u0026lt;- filter_slider(\u0026#34;date\u0026#34;, \u0026#34;\u0026#34;, sd, column = ~date, step = NULL, width = \u0026#39;100%\u0026#39;, dragRange = TRUE) year_filter \u0026lt;- filter_checkbox(\u0026#34;year\u0026#34;, \u0026#34;Year\u0026#34;, sd, group = ~year, inline = FALSE) day_filter \u0026lt;- filter_checkbox(\u0026#34;day\u0026#34;, \u0026#34;Day of the Week\u0026#34;, sd, group = ~DAY_OF_WEE, inline = FALSE) severity_filter \u0026lt;- filter_checkbox(\u0026#34;sev\u0026#34;, \u0026#34;Severity\u0026#34;, sd, group = ~SEVERITY, inline = FALSE) type_filter \u0026lt;- filter_checkbox(\u0026#34;type\u0026#34;, \u0026#34;Type\u0026#34;, sd, group = ~ACCIDENT_1, inline = FALSE) Rstudio\u0026rsquo;s leaflet package is the most ubiquitous method for incorporating an interactive map. In this post I am not going to discuss all the options I use but will include the code. To make the map look and feel how I want, I will use addPopups and addProviderTiles.\nOriginally I intended to include addAwesomeMarkers, but with this data set there are too many points for the markers to look good and add meaning to the final map. Instead I will use transparent circle markers to give a sense of density where points overlap.\nNow, I use leaflet maps a lot. They are incredibly versatile with a wealth of options (see documentation to get started). They are also very simple. In the code below you can see my standard setup (excluding addCircleMarkers()). I save this as a snippet and insert it each time I make a map. This means that my maps are consistent and that I can get something done in a few minutes just focusing on the new layer.\nmap \u0026lt;- leaflet(sd, width = \u0026#39;100%\u0026#39;) %\u0026gt;% addProviderTiles(\u0026#34;CartoDB.Positron\u0026#34;, group = \u0026#39;Default\u0026#39;) %\u0026gt;% addProviderTiles(\u0026#34;Esri.WorldImagery\u0026#34;, group = \u0026#39;Aerial\u0026#39;) %\u0026gt;% addProviderTiles(\u0026#34;OpenStreetMap.Mapnik\u0026#34;, group = \u0026#39;Street\u0026#39;) %\u0026gt;% addProviderTiles(\u0026#34;OpenTopoMap\u0026#34;, group = \u0026#39;Terrain\u0026#39;) %\u0026gt;% addScaleBar(\u0026#39;bottomright\u0026#39;) %\u0026gt;% addCircleMarkers(group = \u0026#39;Accidents\u0026#39;, stroke = FALSE, opacity = 0.4, fillColor = ~sapply(SEVERITY, switch, USE.NAMES = FALSE, \u0026#39;Fatal accident\u0026#39; = \u0026#39;#a50f15\u0026#39;, \u0026#39;Serious injury accident\u0026#39; = \u0026#39;#de2d26\u0026#39;, \u0026#39;Other injury accident\u0026#39; = \u0026#39;#fb6a4a\u0026#39; ), radius = ~sapply(SEVERITY, switch, USE.NAMES = FALSE, \u0026#39;Fatal accident\u0026#39; = 10, \u0026#39;Serious injury accident\u0026#39; = 7, \u0026#39;Other injury accident\u0026#39; = 5 ), popup = ~paste0(\u0026#39;\u0026lt;h3\u0026gt;Some Accident Details\u0026lt;/h3\u0026gt;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Severity\u0026lt;/b\u0026gt;: \u0026#39;, SEVERITY, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Type of Accident\u0026lt;/b\u0026gt;: \u0026#39;, ACCIDENT_1, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Light Conditions\u0026lt;/b\u0026gt;: \u0026#39;, LIGHT_COND, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Road Geometry\u0026lt;/b\u0026gt;: \u0026#39;, ROAD_GEOME, \u0026#34;\u0026lt;br\u0026gt;\u0026#34;, \u0026#39;\u0026lt;b\u0026gt;Speed Zone\u0026lt;/b\u0026gt;: \u0026#39;, SPEED_ZONE, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Number of People\u0026lt;/b\u0026gt;: \u0026#39;, TOTAL_PERS, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Persons Injured or Fatality\u0026lt;/b\u0026gt;: \u0026#39;, INJ_OR_FAT) ) %\u0026gt;% addLayersControl( baseGroups = c(\u0026#34;Default\u0026#34;, \u0026#34;Aerial\u0026#34;, \u0026#34;Street\u0026#34;, \u0026#34;Terrain\u0026#34;), overlayGroups = \u0026#39;Accidents\u0026#39;, options = layersControlOptions(collapsed = TRUE) ) Now we have all of the elements we need. These could have been added directly to the rmarkdown page with each code chunk, but wrapping them in some htmltools and crosstalk tags makes for a slightly cleaner user experience.\ntags$div(class=\u0026#34;well well-lg\u0026#34;, tagList( tags$h2(\u0026#39;Alcohol Related Motor Vehicle Accidents 2012 - 2017\u0026#39;), date_filter, map, bscols(day_filter, list(year_filter, severity_filter), type_filter) ) ) ","date":"2018-07-25T00:00:00Z","image":"/img/filter_header.jpg","permalink":"/p/filtering-spatial-data/","title":"Filtering Spatial Data with Crosstalk"},{"content":"  Currently I mostly work with R and use it for statistics, modelling, GIS and web / pdf based reporting. Therefore the choice of Blogdown seemed simple enough. You will find many existing posts about others setting up their blogs in a similar way. Further, the book blogdown: Creating Websites with R Markdown by Yihui Xie et al. covers everything you need to know about the process. Here, I am only going to discuss the few specific issues I had to deal with to get started.\nChoosing a Theme and Installing There are many themes available at Hugo Themes. This one is called Hugo Future Imperfect by Julio Pescdor. Once you have chosen it is time to begin. Themes are loaded directly from their Github repositories so you will need the themes Github username and repository name.\n install.packages(\u0026quot;blogdown\u0026quot;) blogdown::install_hugo() blogdown::new_site(theme = \u0026quot;jpescador/hugo-future-imperfect\u0026quot;)  Now everything is up an running but it is easier to test everything if you have some content. The Blogdown package includes a series of addins that makes this process simple, just select New Post from the Addins menu.\nnew post screenshot\n  Configuring the Site With some simple content generated use blogdown:::serve_site() to preview your site. At this stage it will not look exactly as you expected. Each theme has a config.toml that is used to setup each site. Most themes will have detailed instructions or an example project for your reference. This file is quite readable so you can just scan through and copy the settings you need.\nBe sure to read any documentation that comes with the theme as they are all different and may have some simple gotchas. Here the CSS files did not want to load until I found that I had to add the setting relativeURLs = true. Also play around with all the settings in the config.toml file just so you know what they do.\n Deploying Hugo generates static sites so there are many deployment options. The simplest is to run blogdown::build_site() and then copy the contents of the public folder to your hosting service. I won’t go though them as the blogdown book mentioned above goes into great detail.\nAs I am too cheap to pay for a hosting service and want to make use of my Github pages URL I decided (against the suggestions in the book) to use Github and Travis. After referring to the blogdown book for instructions. The only difficulty was linking the Github repository with Travis with permissions to write back to the repository. This post contained all the details necessary for setting an environment variable in Travis.\nThis worked nicely BUT…\n Actually Deploying When Travis builds the site it runs blogdown::build_site() just as you would on your computer. Now if you have an .Rmd post that uses R packages, they are installed on your computer but they are not on Travis. Travis can be configured to install the packages, but you would have to do this each time you add use a new package. I intend to experiment with a lot of different packages and this seems like a lot of effort when you can simply build the site locally and move the static files.\nAfter several dead-ends and messing around with folder names to appease the Github gods (who were not appeased), I came across instructions on the GoHugo website. This involved creating 2 repositories one called blog and the other \u0026lt;USER\u0026gt;.github.io and then setting up the public folder of blog as a git sub-module that commits to \u0026lt;USER\u0026gt;.github.io.\nThe only drawback is that if you use the git GUI in RStudio the sub-module does not commit. But this is likely user error as my knowledge of git is limited. For now I am using the terminal to push changes in the public folder.\n # run once git submodule add -b master git@github.com:mrjoh3/mrjoh3.github.io.git public cd public git pull # after updates git add . git commit -m \u0026#39;some message\u0026#39; git push origin master   Lessons Learnt Blogdown has been fantastic, I had a site up and running within an hour. And this included install dependancies finding a theme and understanding the config.toml file. Even with complication I only spent 3 hours getting my deployment sorted.\nWhat I should have done from the beginning is think more about my own needs and requirements. All of the instructions for the different services were all clear and worked as expected. That they sometimes did not meet my needs reflects more on my preparation.\n ","date":"2018-07-21T00:00:00Z","image":"/img/MRJ_2020_DSC9204_narrow.png","permalink":"/p/another-blog-about-a-blog/","title":"Another blog about a blog"},{"content":"   #rstats + #sf + #ggplot2 + #gganimate = a great way to visualise some sobering data. Only accidents where alcohol was involved. Remember each frame only accidents from a single day. See code gist https://t.co/wqEcYku2us and get data from #vicroads api https://t.co/cBX1kBz9iw pic.twitter.com/tNobkLQQQH — Matt Johnson (@mrjoh3) July 18, 2018    library(dplyr) library(sf) library(ggplot2) library(gganimate) shp \u0026lt;- st_read(\u0026#39;~/Documents/Matt/GIS/shp\u0026#39;,\u0026#39;Crashes_Last_Five_Years\u0026#39;, quiet = TRUE) %\u0026gt;% filter(ALCOHOL_RE == \u0026#39;Yes\u0026#39;) %\u0026gt;% mutate(date = as.Date(as.character(ACCIDENT_D), \u0026#39;%d/%m/%Y\u0026#39;)) vic \u0026lt;- st_read(\u0026#39;~/Documents/Matt/GIS/shp\u0026#39;, \u0026#39;VIC_STATE_POLYGON_shp\u0026#39;, quiet = TRUE) plt \u0026lt;- ggplot() + geom_sf(data = vic, fill = \u0026#39;grey\u0026#39;, colour = \u0026#39;darkgrey\u0026#39;) + geom_sf(data = shp, aes(colour = SEVERITY)) + scale_color_manual(values = c(\u0026#39;red\u0026#39;, \u0026#39;orange\u0026#39; ,\u0026#39;yellow\u0026#39;)) + guides(colour = guide_legend(\u0026#39;\u0026#39;)) + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), panel.background = element_rect(fill = \u0026quot;darkgrey\u0026quot;, colour = \u0026quot;darkgrey\u0026quot;), plot.background = element_rect(fill = \u0026quot;darkgrey\u0026quot;), legend.position = \u0026quot;bottom\u0026quot;, legend.background = element_rect(fill = \u0026quot;darkgrey\u0026quot;), legend.key = element_rect(fill = \u0026quot;darkgrey\u0026quot;, colour = \u0026quot;darkgrey\u0026quot;)) + labs(title = \u0026#39;Alcohol Related Daily Road Accidents in Victoria 2012-2017\u0026#39;, subtitle = \u0026#39;Date: {frame_time}\u0026#39;) + transition_time(date) + ease_aes(\u0026#39;linear\u0026#39;) ","date":"2018-07-20T00:00:00Z","image":"/img/snow-header.png","permalink":"/p/animating-spatial-data/","title":"Animating Spatial Data"}]