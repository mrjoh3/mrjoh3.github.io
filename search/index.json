[{"content":"   Some time ago I had to implement an image gallery within a shiny application. A simple grid of small thumbnail images where clicking opens the full image. Nothing complicated, but I did have several requirements:\nThe gallery needed to render from a folder of images The gallery interface and thumbnails needed to be responsive The gallery needed to link to other shiny UI Images come from one location, no need for generating thumbnails  There is a wide variety of javascript image gallery implementations. To start with I looked at Lightbox and PhotoSwipe. Lightbox was the easiest to use and many other JS libraries are based on it. Photoswipe is also very popular with a very nice UI, zoom and touch integration plus an extensive API. Both are available under MIT licences. Unfortunately my javascript is limited and I did not have enough time to get more than the most basic Photoswipe gallery to work. But, the Lightbox gallery works very nicely. Here, I will focus on the Lightbox implementation.\nThis work was eventually built into a shiny app so you can see the galleries in action. I have also wrapped the code in the gallerier package. Gallerier can be used in both shiny and rmarkdown documents. Code for the original shiny app is on Github.\nThe gallerier is very much a work in progress and more proof-of-concept than usable package. Please use it if you wish and let me know how you get on. The package also has some other functionality for creating card packs, but I will discuss this in a separate post.\nUsing Lightbox in R The great thing about Lightbox is that the setup is relatively easy. For a gallery all it requires is the creation of a structured “image set”. The “image set” defines the location of the images and any metadata you wish to display. If you look at the Lightbox documentation the “image set” is a group of image links that look like this:\n\u0026lt;a href=\u0026quot;images/image-2.jpg\u0026quot; data-lightbox=\u0026quot;roadtrip\u0026quot;\u0026gt;Image #2\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;images/image-3.jpg\u0026quot; data-lightbox=\u0026quot;roadtrip\u0026quot;\u0026gt;Image #3\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;images/image-4.jpg\u0026quot; data-lightbox=\u0026quot;roadtrip\u0026quot;\u0026gt;Image #4\u0026lt;/a\u0026gt; To to recreate this in R, add all the required details to a data.frame. Then iterate over the rows and using htmltools create a taglist.\ntagList( lapply(seq_len(nrow(df)), function(i){ tags$a(id = \u0026#39;image ID\u0026#39;, href = \u0026#39;path to image\u0026#39;, `data-lightbox` = \u0026#39;gallery group name\u0026#39;, `data-title` = \u0026#39;metadata to display\u0026#39;, tags$img(class = \u0026#39;card-img-top\u0026#39;, src = \u0026#39;path to image\u0026#39;, width = \u0026#39;image width px\u0026#39;), height = \u0026#39;auto\u0026#39;) }) ) The code in gallerier also adds each image to a HTML card. This makes it a little easier to format the images and make the gallery look nice and consistent; plus it makes the gallery responsive to small screens and changes in screen size.\n An Example In this example we iterate over a folder of images and extract some metadata from the image file name. We also add an id key using hashids::encode() as each image tag needs a unique id for the lightbox gallery. This is particularly important where you have multiple galleries on one page. The only required field in the data.frame is the src field. Any other fields will be joined together to form the metadata description that displays under each image after it is selected.\nlibrary(dplyr) library(lubridate) library(hashids) library(gallerier) images \u0026lt;- data.frame(src = list.files(\u0026#39;www/img\u0026#39;)) %\u0026gt;% tidyr::separate(col = \u0026#39;src\u0026#39;, c(\u0026#39;txt\u0026#39;, \u0026#39;date\u0026#39;, \u0026#39;time\u0026#39;, \u0026#39;msec\u0026#39;), sep = \u0026#39;_|\\\\.\u0026#39;, remove = FALSE) %\u0026gt;% rowwise() %\u0026gt;% mutate(date = as.character(lubridate::ymd(date)), key = hashids::encode(1e3 + as.integer(msec), hashid_settings(salt = \u0026#39;this is my salt\u0026#39;))) knitr::kable(head(images))   src txt date time msec key    IMG_20181019_131513_230.jpg IMG 2018-10-19 131513 230 Vvm  IMG_20181022_160737_185.jpg IMG 2018-10-22 160737 185 MQB  IMG_20181024_180354_405.jpg IMG 2018-10-24 180354 405 rQV  IMG_20181024_180354_425.jpg IMG 2018-10-24 180354 425 mZR  IMG_20181024_180354_432.jpg IMG 2018-10-24 180354 432 3LY  IMG_20181024_183858_737.jpg IMG 2018-10-24 183858 737 WK4    Then we pass the data.frame to gallerier::lightbox_gallery() and tell it where the images can be found relative to the final HTML page. This can sometimes take a couple of goes to get right depending on which framework you are using. For shiny the images will need to be in a www/img folder. But the www is dropped within shiny so the referenced path would be img/. For rmarkdown the www does not get dropped, so path='www/img'. This blog is created using blogdown and so the images need to be in the static folder, but are then referenced as path='../../img/'.\n Some Gotcha’s As indicated above, referring to the image location can be quite variable. This is also the case for referring to the required JavaScript and CSS files. In shiny, gallerier::lightbox_gallery() embeds all the required files, but this does not work in rmarkdown. At least, I have not managed to get it to work. What does work is explicitly referencing the files at the top of the .Rmd file.\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;www/lightbox-2-2.11.3/css/lightbox.min.css\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;www/lightbox-2-2.11.3/js/lightbox-plus-jquery.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; You will notice in the code above I referenced the JS file lightbox-plus-jquery.min.js. This is because the Hugo theme that this blog uses does not include jquery, luckily this file has it embedded. If you are using shiny or rmarkdown, jquery is already available, so you would refer to lightbox.min.js.\n The Gallery Below is the final result. I am pretty happy with the look of the gallery and the functionality of lightbox. Getting this to work in shiny was straight forward and rmarkdown was not too bad. But I did have a very hard time with blogdown. Mostly it took far too long for me to realise that jquery was missing as I had not had to load it in the other frameworks.\nTo render the gallery pass the data.frame to the lightbox_gallery() function. Give the gallery a name, define the image file path, and that is it.\n                         /*! * Lightbox v2.11.3 * by Lokesh Dhakar * * More info: * http://lokeshdhakar.com/projects/lightbox2/ * * Copyright Lokesh Dhakar * Released under the MIT license * https://github.com/lokesh/lightbox2/blob/master/LICENSE * * @preserve */ !function(a,b){\"function\"==typeof define\u0026\u0026define.amd?define([\"jquery\"],b):\"object\"==typeof exports?module.exports=b(require(\"jquery\")):a.lightbox=b(a.jQuery)}(this,function(a){function b(b){this.album=[],this.currentImageIndex=void 0,this.init(),this.options=a.extend({},this.constructor.defaults),this.option(b)}return b.defaults={albumLabel:\"Image %1 of %2\",alwaysShowNavOnTouchDevices:!1,fadeDuration:600,fitImagesInViewport:!0,imageFadeDuration:600,positionFromTop:50,resizeDuration:700,showImageNumberLabel:!0,wrapAround:!1,disableScrolling:!1,sanitizeTitle:!1},b.prototype.option=function(b){a.extend(this.options,b)},b.prototype.imageCountLabel=function(a,b){return this.options.albumLabel.replace(/%1/g,a).replace(/%2/g,b)},b.prototype.init=function(){var b=this;a(document).ready(function(){b.enable(),b.build()})},b.prototype.enable=function(){var b=this;a(\"body\").on(\"click\",\"a[rel^=lightbox], area[rel^=lightbox], a[data-lightbox], area[data-lightbox]\",function(c){return b.start(a(c.currentTarget)),!1})},b.prototype.build=function(){if(!(a(\"#lightbox\").length0)){var b=this;a('').appendTo(a(\"body\")),this.$lightbox=a(\"#lightbox\"),this.$overlay=a(\"#lightboxOverlay\"),this.$outerContainer=this.$lightbox.find(\".lb-outerContainer\"),this.$container=this.$lightbox.find(\".lb-container\"),this.$image=this.$lightbox.find(\".lb-image\"),this.$nav=this.$lightbox.find(\".lb-nav\"),this.containerPadding={top:parseInt(this.$container.css(\"padding-top\"),10),right:parseInt(this.$container.css(\"padding-right\"),10),bottom:parseInt(this.$container.css(\"padding-bottom\"),10),left:parseInt(this.$container.css(\"padding-left\"),10)},this.imageBorderWidth={top:parseInt(this.$image.css(\"border-top-width\"),10),right:parseInt(this.$image.css(\"border-right-width\"),10),bottom:parseInt(this.$image.css(\"border-bottom-width\"),10),left:parseInt(this.$image.css(\"border-left-width\"),10)},this.$overlay.hide().on(\"click\",function(){return b.end(),!1}),this.$lightbox.hide().on(\"click\",function(c){\"lightbox\"===a(c.target).attr(\"id\")\u0026\u0026b.end()}),this.$outerContainer.on(\"click\",function(c){return\"lightbox\"===a(c.target).attr(\"id\")\u0026\u0026b.end(),!1}),this.$lightbox.find(\".lb-prev\").on(\"click\",function(){return 0===b.currentImageIndex?b.changeImage(b.album.length-1):b.changeImage(b.currentImageIndex-1),!1}),this.$lightbox.find(\".lb-next\").on(\"click\",function(){return b.currentImageIndex===b.album.length-1?b.changeImage(0):b.changeImage(b.currentImageIndex+1),!1}),this.$nav.on(\"mousedown\",function(a){3===a.which\u0026\u0026(b.$nav.css(\"pointer-events\",\"none\"),b.$lightbox.one(\"contextmenu\",function(){setTimeout(function(){this.$nav.css(\"pointer-events\",\"auto\")}.bind(b),0)}))}),this.$lightbox.find(\".lb-loader, .lb-close\").on(\"click\",function(){return b.end(),!1})}},b.prototype.start=function(b){function c(a){d.album.push({alt:a.attr(\"data-alt\"),link:a.attr(\"href\"),title:a.attr(\"data-title\")||a.attr(\"title\")})}var d=this,e=a(window);e.on(\"resize\",a.proxy(this.sizeOverlay,this)),this.sizeOverlay(),this.album=[];var f,g=0,h=b.attr(\"data-lightbox\");if(h){f=a(b.prop(\"tagName\")+'[data-lightbox=\"'+h+'\"]');for(var i=0;ik||g.heightj)\u0026\u0026(g.width/kg.height/j?(i=k,h=parseInt(g.height/(g.width/i),10),f.width(i),f.height(h)):(h=j,i=parseInt(g.width/(g.height/h),10),f.width(i),f.height(h))),c.sizeContainer(f.width(),f.height())},g.src=this.album[b].link,this.currentImageIndex=b},b.prototype.sizeOverlay=function(){var b=this;setTimeout(function(){b.$overlay.width(a(document).width()).height(a(document).height())},0)},b.prototype.sizeContainer=function(a,b){function c(){d.$lightbox.find(\".lb-dataContainer\").width(g),d.$lightbox.find(\".lb-prevLink\").height(h),d.$lightbox.find(\".lb-nextLink\").height(h),d.$overlay.focus(),d.showImage()}var d=this,e=this.$outerContainer.outerWidth(),f=this.$outerContainer.outerHeight(),g=a+this.containerPadding.left+this.containerPadding.right+this.imageBorderWidth.left+this.imageBorderWidth.right,h=b+this.containerPadding.top+this.containerPadding.bottom+this.imageBorderWidth.top+this.imageBorderWidth.bottom;e!==g||f!==h?this.$outerContainer.animate({width:g,height:h},this.options.resizeDuration,\"swing\",function(){c()}):c()},b.prototype.showImage=function(){this.$lightbox.find(\".lb-loader\").stop(!0).hide(),this.$lightbox.find(\".lb-image\").fadeIn(this.options.imageFadeDuration),this.updateNav(),this.updateDetails(),this.preloadNeighboringImages(),this.enableKeyboardNav()},b.prototype.updateNav=function(){var a=!1;try{document.createEvent(\"TouchEvent\"),a=!!this.options.alwaysShowNavOnTouchDevices}catch(a){}this.$lightbox.find(\".lb-nav\").show(),this.album.length1\u0026\u0026(this.options.wrapAround?(a\u0026\u0026this.$lightbox.find(\".lb-prev, .lb-next\").css(\"opacity\",\"1\"),this.$lightbox.find(\".lb-prev, .lb-next\").show()):(this.currentImageIndex0\u0026\u0026(this.$lightbox.find(\".lb-prev\").show(),a\u0026\u0026this.$lightbox.find(\".lb-prev\").css(\"opacity\",\"1\")),this.currentImageIndex1\u0026\u0026this.options.showImageNumberLabel){var c=this.imageCountLabel(this.currentImageIndex+1,this.album.length);this.$lightbox.find(\".lb-number\").text(c).fadeIn(\"fast\")}else this.$lightbox.find(\".lb-number\").hide();this.$outerContainer.removeClass(\"animating\"),this.$lightbox.find(\".lb-dataContainer\").fadeIn(this.options.resizeDuration,function(){return a.sizeOverlay()})},b.prototype.preloadNeighboringImages=function(){if(this.album.lengththis.currentImageIndex+1){(new Image).src=this.album[this.currentImageIndex+1].link}if(this.currentImageIndex0){(new Image).src=this.album[this.currentImageIndex-1].link}},b.prototype.enableKeyboardNav=function(){this.$lightbox.on(\"keyup.keyboard\",a.proxy(this.keyboardAction,this)),this.$overlay.on(\"keyup.keyboard\",a.proxy(this.keyboardAction,this))},b.prototype.disableKeyboardNav=function(){this.$lightbox.off(\".keyboard\"),this.$overlay.off(\".keyboard\")},b.prototype.keyboardAction=function(a){var b=a.keyCode;27===b?(a.stopPropagation(),this.end()):37===b?0!==this.currentImageIndex?this.changeImage(this.currentImageIndex-1):this.options.wrapAround\u0026\u0026this.album.length1\u0026\u0026this.changeImage(this.album.length-1):39===b\u0026\u0026(this.currentImageIndex!==this.album.length-1?this.changeImage(this.currentImageIndex+1):this.options.wrapAround\u0026\u0026this.album.length1\u0026\u0026this.changeImage(0))},b.prototype.end=function(){this.disableKeyboardNav(),a(window).off(\"resize\",this.sizeOverlay),this.$lightbox.fadeOut(this.options.fadeDuration),this.$overlay.fadeOut(this.options.fadeDuration),this.options.disableScrolling\u0026\u0026a(\"body\").removeClass(\"lb-disable-scrolling\")},new b}); //# sourceMappingURL=lightbox.min.map .card-deck { display: flex; justify-content: flex-start; flex-flow: row wrap; align-items: stretch; padding: 20px; border-spacing: 1.25rem 0; } .card-deck .card { /*display: block;*/ flex-basis: 21%; /* change this value for each breakpoint*/ } .card { font-size: 1em; overflow: hidden; margin: 20px; padding: 0; border: none; border-radius: .28571429rem; box-shadow: 0 1px 3px 0 #d4d4d5, 0 0 0 1px #d4d4d5; @media(min-width: 56rem) { width: 22.3333%; } } .card-block { font-size: 1em; position: relative; margin: 0; padding: 1em; border: none; border-top: 1px solid rgba(34, 36, 38, .1); box-shadow: none; } .card-img-top { display: block; width: 100%; height: auto; }   ","date":"2021-06-19T00:00:00Z","image":"https://mrjoh3.github.io/img/MRJ_2020_DSC9961.png","permalink":"https://mrjoh3.github.io/p/shiny-image-gallery-examples/","title":"Shiny and Rmarkdown Image Galleries"},{"content":"   hljs.highlightAll(); In a previous post I wanted to look at the daily pattern of motor vehicle accidents across the state of Victoria. What I am really interested in though is the accidents in my local area.\nTo do this I am going to use leaflet, sf to handle all the spatial data and crosstalk to filter the data visible in the map. The crosstalk package enables a level of interactivity that is usually reserved for more complex server (shiny) based applications.\nThe data is from the VicRoads open data portal. The portal has an API but I have previously downloaded the entire data set as a shapefile. There are more than 75 thousand accidents recorded in the data set but I am only looking at accidents related to alcohol for the years 2015 through 2017.\n library(sf) library(dplyr) library(leaflet) library(crosstalk) library(lubridate) library(htmltools) shp \u0026lt;- st_read(\u0026#39;~/Documents/Matt/GIS/shp\u0026#39;,\u0026#39;Crashes_Last_Five_Years\u0026#39;, quiet = TRUE, stringsAsFactors = FALSE) %\u0026gt;% mutate(date = as.Date(as.character(ACCIDENT_D), \u0026#39;%d/%m/%Y\u0026#39;), year = year(date)) %\u0026gt;% filter(ALCOHOL_RE == \u0026#39;Yes\u0026#39;) sd \u0026lt;- SharedData$new(shp)  Once the data is imported and cleaned it is inserted into a crosstalk::SharedData$new() object. This creates a common data input for all interactive objects such as UI elements and compatible widgets. For a complete list of compatible widgets see the crosstalk reference page.\nAm minimal example can be just two lines of additional code which results in a UI slider connected to the date field and a leaflet map. Adjusting the slider will filter the markers visible in the map.\n filter_slider(\u0026quot;date\u0026quot;, \u0026quot;\u0026quot;, sd, column=~date, step=10, width=800) leaflet(sd) %\u0026gt;% addTiles() %\u0026gt;% addMarkers()  But let’s add some additional layers of interactivity. Crosstalk has three UI filters built-in; slider, check-box and select. In the code below I am creating and saving the UI elements in order to have a little more control fitting them together.\n date_filter \u0026lt;- filter_slider(\u0026quot;date\u0026quot;, \u0026quot;\u0026quot;, sd, column = ~date, step = NULL, width = \u0026#39;100%\u0026#39;, dragRange = TRUE) year_filter \u0026lt;- filter_checkbox(\u0026quot;year\u0026quot;, \u0026quot;Year\u0026quot;, sd, group = ~year, inline = FALSE) day_filter \u0026lt;- filter_checkbox(\u0026quot;day\u0026quot;, \u0026quot;Day of the Week\u0026quot;, sd, group = ~DAY_OF_WEE, inline = FALSE) severity_filter \u0026lt;- filter_checkbox(\u0026quot;sev\u0026quot;, \u0026quot;Severity\u0026quot;, sd, group = ~SEVERITY, inline = FALSE) type_filter \u0026lt;- filter_checkbox(\u0026quot;type\u0026quot;, \u0026quot;Type\u0026quot;, sd, group = ~ACCIDENT_1, inline = FALSE)  Rstudio’s leaflet package is the most ubiquitous method for incorporating an interactive map. In this post I am not going to discuss all the options I use but will include the code. To make the map look and feel how I want, I will use addPopups and addProviderTiles.\nOriginally I intended to include addAwesomeMarkers, but with this data set there are too many points for the markers to look good and add meaning to the final map. Instead I will use transparent circle markers to give a sense of density where points overlap.\nNow, I use leaflet maps a lot. They are incredibly versatile with a wealth of options (see documentation to get started). They are also very simple. In the code below you can see my standard setup (excluding addCircleMarkers()). I save this as a snippet and insert it each time I make a map. This means that my maps are consistent and that I can get something done in a few minutes just focusing on the new layer.\n map \u0026lt;- leaflet(sd, width = \u0026#39;100%\u0026#39;) %\u0026gt;% addProviderTiles(\u0026quot;CartoDB.Positron\u0026quot;, group = \u0026#39;Default\u0026#39;) %\u0026gt;% addProviderTiles(\u0026quot;Esri.WorldImagery\u0026quot;, group = \u0026#39;Aerial\u0026#39;) %\u0026gt;% addProviderTiles(\u0026quot;OpenStreetMap.Mapnik\u0026quot;, group = \u0026#39;Street\u0026#39;) %\u0026gt;% addProviderTiles(\u0026quot;OpenTopoMap\u0026quot;, group = \u0026#39;Terrain\u0026#39;) %\u0026gt;% addScaleBar(\u0026#39;bottomright\u0026#39;) %\u0026gt;% addCircleMarkers(group = \u0026#39;Accidents\u0026#39;, stroke = FALSE, opacity = 0.4, fillColor = ~sapply(SEVERITY, switch, USE.NAMES = FALSE, \u0026#39;Fatal accident\u0026#39; = \u0026#39;#a50f15\u0026#39;, \u0026#39;Serious injury accident\u0026#39; = \u0026#39;#de2d26\u0026#39;, \u0026#39;Other injury accident\u0026#39; = \u0026#39;#fb6a4a\u0026#39; ), radius = ~sapply(SEVERITY, switch, USE.NAMES = FALSE, \u0026#39;Fatal accident\u0026#39; = 10, \u0026#39;Serious injury accident\u0026#39; = 7, \u0026#39;Other injury accident\u0026#39; = 5 ), popup = ~paste0(\u0026#39;\u0026lt;h3\u0026gt;Some Accident Details\u0026lt;/h3\u0026gt;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Severity\u0026lt;/b\u0026gt;: \u0026#39;, SEVERITY, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Type of Accident\u0026lt;/b\u0026gt;: \u0026#39;, ACCIDENT_1, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Light Conditions\u0026lt;/b\u0026gt;: \u0026#39;, LIGHT_COND, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Road Geometry\u0026lt;/b\u0026gt;: \u0026#39;, ROAD_GEOME, \u0026quot;\u0026lt;br\u0026gt;\u0026quot;, \u0026#39;\u0026lt;b\u0026gt;Speed Zone\u0026lt;/b\u0026gt;: \u0026#39;, SPEED_ZONE, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Number of People\u0026lt;/b\u0026gt;: \u0026#39;, TOTAL_PERS, \u0026#39;\u0026lt;br\u0026gt;\u0026#39;, \u0026#39;\u0026lt;b\u0026gt;Persons Injured or Fatality\u0026lt;/b\u0026gt;: \u0026#39;, INJ_OR_FAT) ) %\u0026gt;% addLayersControl( baseGroups = c(\u0026quot;Default\u0026quot;, \u0026quot;Aerial\u0026quot;, \u0026quot;Street\u0026quot;, \u0026quot;Terrain\u0026quot;), overlayGroups = \u0026#39;Accidents\u0026#39;, options = layersControlOptions(collapsed = TRUE) )  Now we have all of the elements we need. These could have been added directly to the rmarkdown page with each code chunk, but wrapping them in some htmltools and crosstalk tags makes for a slightly cleaner user experience.\n tags$div(class=\u0026quot;well well-lg\u0026quot;, tagList( tags$h2(\u0026#39;Alcohol Related Motor Vehicle Accidents 2012 - 2017\u0026#39;), date_filter, map, bscols(day_filter, list(year_filter, severity_filter), type_filter) ) )   ","date":"2018-07-25T00:00:00Z","image":"https://mrjoh3.github.io/img/filter_header.jpg","permalink":"https://mrjoh3.github.io/p/filtering-spatial-data/","title":"Filtering Spatial Data with Crosstalk"},{"content":"  Currently I mostly work with R and use it for statistics, modelling, GIS and web / pdf based reporting. Therefore the choice of Blogdown seemed simple enough. You will find many existing posts about others setting up their blogs in a similar way. Further, the book blogdown: Creating Websites with R Markdown by Yihui Xie et al. covers everything you need to know about the process. Here, I am only going to discuss the few specific issues I had to deal with to get started.\nChoosing a Theme and Installing There are many themes available at Hugo Themes. This one is called Hugo Future Imperfect by Julio Pescdor. Once you have chosen it is time to begin. Themes are loaded directly from their Github repositories so you will need the themes Github username and repository name.\n install.packages(\u0026quot;blogdown\u0026quot;) blogdown::install_hugo() blogdown::new_site(theme = \u0026quot;jpescador/hugo-future-imperfect\u0026quot;)  Now everything is up an running but it is easier to test everything if you have some content. The Blogdown package includes a series of addins that makes this process simple, just select New Post from the Addins menu.\nnew post screenshot\n  Configuring the Site With some simple content generated use blogdown:::serve_site() to preview your site. At this stage it will not look exactly as you expected. Each theme has a config.toml that is used to setup each site. Most themes will have detailed instructions or an example project for your reference. This file is quite readable so you can just scan through and copy the settings you need.\nBe sure to read any documentation that comes with the theme as they are all different and may have some simple gotchas. Here the CSS files did not want to load until I found that I had to add the setting relativeURLs = true. Also play around with all the settings in the config.toml file just so you know what they do.\n Deploying Hugo generates static sites so there are many deployment options. The simplest is to run blogdown::build_site() and then copy the contents of the public folder to your hosting service. I won’t go though them as the blogdown book mentioned above goes into great detail.\nAs I am too cheap to pay for a hosting service and want to make use of my Github pages URL I decided (against the suggestions in the book) to use Github and Travis. After referring to the blogdown book for instructions. The only difficulty was linking the Github repository with Travis with permissions to write back to the repository. This post contained all the details necessary for setting an environment variable in Travis.\nThis worked nicely BUT…\n Actually Deploying When Travis builds the site it runs blogdown::build_site() just as you would on your computer. Now if you have an .Rmd post that uses R packages, they are installed on your computer but they are not on Travis. Travis can be configured to install the packages, but you would have to do this each time you add use a new package. I intend to experiment with a lot of different packages and this seems like a lot of effort when you can simply build the site locally and move the static files.\nAfter several dead-ends and messing around with folder names to appease the Github gods (who were not appeased), I came across instructions on the GoHugo website. This involved creating 2 repositories one called blog and the other \u0026lt;USER\u0026gt;.github.io and then setting up the public folder of blog as a git sub-module that commits to \u0026lt;USER\u0026gt;.github.io.\nThe only drawback is that if you use the git GUI in RStudio the sub-module does not commit. But this is likely user error as my knowledge of git is limited. For now I am using the terminal to push changes in the public folder.\n # run once git submodule add -b master git@github.com:mrjoh3/mrjoh3.github.io.git public cd public git pull # after updates git add . git commit -m \u0026#39;some message\u0026#39; git push origin master   Lessons Learnt Blogdown has been fantastic, I had a site up and running within an hour. And this included install dependancies finding a theme and understanding the config.toml file. Even with complication I only spent 3 hours getting my deployment sorted.\nWhat I should have done from the beginning is think more about my own needs and requirements. All of the instructions for the different services were all clear and worked as expected. That they sometimes did not meet my needs reflects more on my preparation.\n ","date":"2018-07-21T00:00:00Z","image":"https://mrjoh3.github.io/img/MRJ_2020_DSC9204_narrow.png","permalink":"https://mrjoh3.github.io/p/another-blog-about-a-blog/","title":"Another blog about a blog"},{"content":"   #rstats + #sf + #ggplot2 + #gganimate = a great way to visualise some sobering data. Only accidents where alcohol was involved. Remember each frame only accidents from a single day. See code gist https://t.co/wqEcYku2us and get data from #vicroads api https://t.co/cBX1kBz9iw pic.twitter.com/tNobkLQQQH — Matt Johnson (@mrjoh3) July 18, 2018    library(dplyr) library(sf) library(ggplot2) library(gganimate) shp \u0026lt;- st_read(\u0026#39;~/Documents/Matt/GIS/shp\u0026#39;,\u0026#39;Crashes_Last_Five_Years\u0026#39;, quiet = TRUE) %\u0026gt;% filter(ALCOHOL_RE == \u0026#39;Yes\u0026#39;) %\u0026gt;% mutate(date = as.Date(as.character(ACCIDENT_D), \u0026#39;%d/%m/%Y\u0026#39;)) vic \u0026lt;- st_read(\u0026#39;~/Documents/Matt/GIS/shp\u0026#39;, \u0026#39;VIC_STATE_POLYGON_shp\u0026#39;, quiet = TRUE) plt \u0026lt;- ggplot() + geom_sf(data = vic, fill = \u0026#39;grey\u0026#39;, colour = \u0026#39;darkgrey\u0026#39;) + geom_sf(data = shp, aes(colour = SEVERITY)) + scale_color_manual(values = c(\u0026#39;red\u0026#39;, \u0026#39;orange\u0026#39; ,\u0026#39;yellow\u0026#39;)) + guides(colour = guide_legend(\u0026#39;\u0026#39;)) + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), panel.background = element_rect(fill = \u0026quot;darkgrey\u0026quot;, colour = \u0026quot;darkgrey\u0026quot;), plot.background = element_rect(fill = \u0026quot;darkgrey\u0026quot;), legend.position = \u0026quot;bottom\u0026quot;, legend.background = element_rect(fill = \u0026quot;darkgrey\u0026quot;), legend.key = element_rect(fill = \u0026quot;darkgrey\u0026quot;, colour = \u0026quot;darkgrey\u0026quot;)) + labs(title = \u0026#39;Alcohol Related Daily Road Accidents in Victoria 2012-2017\u0026#39;, subtitle = \u0026#39;Date: {frame_time}\u0026#39;) + transition_time(date) + ease_aes(\u0026#39;linear\u0026#39;) ","date":"2018-07-20T00:00:00Z","image":"https://mrjoh3.github.io/img/snow-header.png","permalink":"https://mrjoh3.github.io/p/animating-spatial-data/","title":"Animating Spatial Data"}]